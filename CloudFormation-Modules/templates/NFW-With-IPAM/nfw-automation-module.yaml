AWSTemplateFormatVersion: 2010-09-09
Description: "CloudFormation Template to create resources required to setup AWS Network Firewall along with associated netwok routing and automation."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Properties
        Parameters:
          - pGLCTSolutionVersion
      - Label:
          default: AWS Network Firewall Deployment Configuration
        Parameters:
          - pVpcSize
          - pTransitGatewayRouteTableIdForAssociation
      - Label:
          default: Deployment Target Configurations
        Parameters:
          - pNetworkAccountId
          - pRootOrganizationalUnitId
          - pS3BaseURLForNestedTemplates
      - Label:
          default: Tagging Configuration
        Parameters:
          - pTagEnvironment
          - pTagSDLC
          - pTagApplicationName
          - pTagApplicationRole
          - pTagCluster
          - pTagDataClassification
          - pTagCompliance
          - pTagDataRetention
          - pTagMapMigrated
          - pTagProjectName
          - pTagProductOwner
          - pTagTechnicalOwner
          - pTagCostCenter
          - pTagBusinessUnit
          - pTagBusinessImpact
          - pTagEscalationPath
          - pTagKnowledgeBase
          - pTagHoursOfOperation
          - pTagMaintenanceWindow
          - pTagBackupSchedule
          - pTagOptOut
          - pTagDeploymentMethod
Parameters:
  pVpcSize:
    Type: String
    Description: "Select the netmask length of the VPC being deployed. VPC Size - Small: /24 or Medium: /22"
    AllowedValues:
      - "Small"
      - "Medium"
    Default: "Small"
  pNetworkAccountId:
    Type: String
    Description: "Account Id of AWS Network Account"
  pTransitGatewayRouteTableIdForAssociation:
    Type: String
    Description: >-
      Existing AWS Transit Gateway route table id. Example: Firewall Route
      Table. Format: tgw-rtb-0a1b2c3d
  pGLCTSolutionVersion:
    Description: The Global Logic solution version. Used to trigger updates on the nested StackSets.
    Type: String
  pRootOrganizationalUnitId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: SSM Parameter for Root Organizational Unit ID
    AllowedPattern: '^([\w.-]{1,900})$|^(\/[\w.-]{1,900})*[\w.-]{1,900}$'
    ConstraintDescription:
      Must be alphanumeric or special characters [., _, -]. In addition, the slash character ( / ) used to delineate hierarchies in parameter names.
    Default: /sra/control-tower/root-organizational-unit-id
  pS3BaseURLForNestedTemplates:
    Type: String
    Description: "Base URL of S3 Bucket for storing Nested CloudFormation templates"

  ##### Tagging Parameters
  pTagEnvironment:
    Type: String
    Description: Select the Name of the Environment
    AllowedValues:
      - Production
      - Non-Production
    Default: Production
  pTagSDLC:
    Type: String
    Description: Distinguish between SDLC Environments e.g., Dev, Test, SIT, UAT
    AllowedValues:
      - Dev
      - Test
      - SIT
      - UAT
      - Pre-Prod
      - Prod
    Default: Prod
  pTagApplicationName:
    Type: String
    Description: Identify resources that are related to a specific application
    Default: Prowler
  pTagApplicationRole:
    Type: String
    Description: Identify the function of a particular respource e.g., Web Server, Message Broker, Database Server
    Default: Security
  pTagCluster:
    Type: String
    Description: Identify resource farms that share a common configuration and perform a specific function for an application
    Default: "N/A"
  pTagDataClassification:
    Type: String
    Description: Identify the specific data confidentiality level a resource supports
    AllowedValues:
      - Public
      - Private
      - Confidential
      - Restricted
    Default: Private
  pTagCompliance:
    Type: String
    Description: Identify the specific compliance requirements that resources must adhere to e.g., PCI-DSS, HIPAA, ISO27001
    Default: "N/A"
  pTagDataRetention:
    Type: String
    Description: Identify the data retention policy applied to the resources (S3, ECR, CloudWatch Logs, EC2 AMI, EBS Snapshots, RDS Snapshot)
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    Default: 365
  pTagMapMigrated:
    Type: String
    Description: Identify resources that have been migrated as part of the AWS Migration Acceleration Program (MAP) for funding purposes
    Default: "N/A"
  pTagProjectName:
    Type: String
    Description: Identify projects that the resource supports
    Default: "Prowler"
  pTagProductOwner:
    Type: String
    Description: Identify who is commercially responsible for the resource
    Default: "TBC"
  pTagTechnicalOwner:
    Type: String
    Description: Identify who is technically responsible for the resource
    Default: "TBC"
  pTagCostCenter:
    Type: String
    Description: Identify the cost center associated with a resource, typically for cost allocation and tracking
    Default: "TBC"
  pTagBusinessUnit:
    Type: String
    Description: Identify the business unit associated with a resource, typically for cost allocation and tracking
    Default: "TBC"
  pTagBusinessImpact:
    Type: String
    Description: Identify the business impact associated with the resource
    AllowedValues:
      - Critical
      - High
      - Medium
      - Low
    Default: Medium
  pTagEscalationPath:
    Type: String
    Description: Identify the next point of contact for a resource in an incident e.g, DevOps Team, 3rd Party Company
    Default: "TBC"
  pTagKnowledgeBase:
    Type: String
    Description: Identifies the location for knowledge base articles/wikis for the resource
    Default: "TBC"
  pTagHoursOfOperation:
    Type: String
    Description: Identify the hours of operation for a resource e.g., 24*7, 06:00 - 22:00 Monday - Friday, 08:00 - 18:00 Monday - Friday
    AllowedValues:
      - 24x7
      - 16x5
      - 9x5
    Default: 24x7
  pTagMaintenanceWindow:
    Type: String
    Description: Identify the hours in which a resource is available for maintenance to occur
    Default: "N/A"
    Default: "N/A"
  pTagBackupSchedule:
    Type: String
    Description: Identify the backup schedule for a resource
    Default: "N/A"
  pTagOptOut:
    Type: String
    Description: Identify whether a resource should be excluded from maintenance activities e.g., True, False
    AllowedValues:
      - "True"
      - "False"
    Default: "False"
  pTagDeploymentMethod:
    Type: String
    Description: Identify the method by which resources are deployed
    AllowedValues:
      - CloudFormation
      - Terraform
      - Manual
    Default: CloudFormation
Mappings:
  mVpcSize:
    Small:
      VpcCidr: 24
    Medium:
      VpcCidr: 22
Resources:
  # CloudWatch Log Group, IAM Role, Lambda Function and Custom Resource for Retrieving IPAM Pool ID that is used by VPC
  rIpamGetPoolIdLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${rIpamLambdaGetPoolId}
      RetentionInDays: !Ref pTagDataRetention
      Tags:
        - Key: Name
          Value: !Sub Org-${pTagBusinessUnit}-GetIpamPoolId-Logs
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod
  rCustomGetPoolId:
    Type: Custom::GetIpamPoolId
    Properties:
      ServiceToken: !GetAtt rIpamLambdaGetPoolId.Arn
  rIpamLambdaRoleGetPoolId:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ipampolicy
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeIpamPools"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub Org-${pTagBusinessUnit}-GetIpamPoolIdLambda-Role
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod
  rIpamLambdaGetPoolId:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: [arm64]
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          from botocore.exceptions import ClientError

          ec2_client = boto3.client('ec2')
          region = os.environ['AWS_REGION']
          compliance = os.environ['COMPLIANCE']

          def lambda_handler(event,context):
              responseData = {}
              status = cfnresponse.FAILED

              if event['RequestType'] == 'Create':
                  try:
                      ipam_pool = ec2_client.describe_ipam_pools(
                          DryRun = False,
                          Filters = [{
                                  'Name': 'locale',
                                  'Values': [region]
                              }
                              ])

                      num_of_pools = len(ipam_pool['IpamPools'])
                      if num_of_pools == 0:
                          print(f"No IPAM Pools Configured in {region}")
                      else:
                          print(f"Number of Pools found in {region}: {num_of_pools}")

                      for ip_pool in ipam_pool['IpamPools']:
                          print(f"\nChecking IPAM Pool: {ip_pool}")

                          if 'AllocationResourceTags' not in ip_pool or len(ip_pool['AllocationResourceTags']) == 0:
                              print(f"IPAM Pool {ip_pool['IpamPoolId']} has no Allocation Resource Tags applied")

                          else:
                              for tag in ip_pool['AllocationResourceTags']:
                                  if tag['Value'] == compliance:
                                      ip_pool_id = ip_pool['IpamPoolId']
                                      print(f"\nFound IPAM Pool {ip_pool_id} with Allocation Resource Tag value matching \"{compliance}\"")
                                      responseData['Data'] = ip_pool_id
                                      status = cfnresponse.SUCCESS
                                      cfnresponse.send(event, context, status, responseData)

                      print(f"\nNo IPAM Pools found in {region} with Allocation Resource Tag value matching \"{compliance}\"")

                      cfnresponse.send(event, context, status, responseData)

                  except ClientError as e:
                      print(e.response['Error']['Message'])
                      cfnresponse.send(event, context, cfnresponse.FAILED, e.response)
              if event['RequestType'] == 'Update':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Environment:
        Variables:
          COMPLIANCE: !Ref pTagCompliance
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt rIpamLambdaRoleGetPoolId.Arn
      Runtime: python3.9
      Timeout: 60
      Tags:
        - Key: Name
          Value: !Sub Org-${pTagBusinessUnit}-GetIpamPoolId
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod

  rCustomGetCIDRFromIPAM:
    Type: Custom::GetIpamPoolId
    Properties:
      ServiceToken: !GetAtt rGetCIDRFromIPAMLambda.Arn
      VPCSize: !FindInMap [mVpcSize, !Ref pVpcSize, VpcCidr]
      IPAMPoolId: !GetAtt rCustomGetPoolId.Data
  rGetCIDRFromIPAMLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ipampolicy
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:AllocateIpamPoolCidr"
                Resource: !Sub arn:aws:ec2::${pNetworkAccountId}:ipam-pool/${rCustomGetPoolId.Data}
      Tags:
        - Key: Name
          Value: !Sub Org-${pTagBusinessUnit}-GetCIDRFromIPAMLambda-Role
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod
  rGetCIDRFromIPAMLambda:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: [arm64]
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          from botocore.exceptions import ClientError

          ec2_client = boto3.client('ec2')
          region = os.environ['AWS_REGION']
          status = cfnresponse.FAILED

          def lambda_handler(event,context):
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                      ipam_pool_id = event["ResourceProperties"]["IPAMPoolId"]
                      vpc_size = event["ResourceProperties"]["VPCSize"]

                      response = ec2_client.allocate_ipam_pool_cidr(
                          IpamPoolId=ipam_pool_id,
                          NetmaskLength=vpc_size)

                      responseData['Cidr'] = response['IpamPoolAllocation']['Cidr']
                      status = cfnresponse.SUCCESS

                  except ClientError as e:
                      print(e.response['Error']['Message'])
                      responseData = e.response

              if event['RequestType'] == 'Update':
                 status = cfnresponse.SUCCESS
              if event['RequestType'] == 'Delete':
                  status = cfnresponse.SUCCESS

              cfnresponse.send(event, context, status, responseData)

      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt rGetCIDRFromIPAMLambdaRole.Arn
      Runtime: python3.9
      Timeout: 60
      Tags:
        - Key: Name
          Value: !Sub Org-${pTagBusinessUnit}-rGetCIDRFromIPAMLambda
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod

  #IAM Role, Lambda Function and Custom Resource for Retrieving Transit Gateway Details
  rCustomGetTgwDetails:
    Type: Custom::GetTgwId
    Properties:
      ServiceToken: !GetAtt rTransitGatewayLambdaGetTgwDetails.Arn
  rTransitGatewayLambdaRoleGetTgwDetails:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: tgwpolicy
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeTransitGateways"
                  - "ec2:DescribeTransitGatewayRouteTables"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${pTagApplicationName}-Lambda-GetTransitGatewayId
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod
  rTransitGatewayLambdaGetTgwDetails:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: [arm64]
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          from botocore.exceptions import ClientError

          ec2_client = boto3.client('ec2')
          region = os.environ['AWS_REGION']

          def lambda_handler(event,context):
              responseData = {}
              if event['RequestType'] == 'Create':
                  try:
                      transit_gateways = ec2_client.describe_transit_gateways()
                      status = cfnresponse.FAILED
                      print(transit_gateways)
                      if len(transit_gateways['TransitGateways']) == 0:
                          print(f"No Transit Gateways exist in {region}")
                      else:
                          responseData['TransitGatewayID'] = transit_gateways['TransitGateways'][0]['TransitGatewayId']

                          tgw_route_tables = ec2_client.describe_transit_gateway_route_tables(
                              Filters=[
                                {
                                    'Name': 'transit-gateway-id',
                                    'Values': [
                                       responseData['TransitGatewayID']
                                    ]
                                }
                              ]
                          )
                          print(tgw_route_tables)

                          for route_table in tgw_route_tables['TransitGatewayRouteTables']:
                              for tag in route_table['Tags']:
                                  if tag['Key'] == 'Name':
                                      route_table_name = tag['Value']
                                      route_table_id = route_table['TransitGatewayRouteTableId']
                                      print(route_table_name)
                                      print(route_table_id)
                                      responseData[route_table_name] = route_table_id

                          status = cfnresponse.SUCCESS
                      cfnresponse.send(event, context, status, responseData)
                  except ClientError as e:
                      print(e.response['Error']['Message'])
                      cfnresponse.send(event, context, cfnresponse.FAILED, e.response)
              if event['RequestType'] == 'Update':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt rTransitGatewayLambdaRoleGetTgwDetails.Arn
      Runtime: python3.9
      Timeout: 60
      Tags:
        - Key: Name
          Value: !Sub Org-${pTagApplicationName}-GetTgwId
        - Key: Environment
          Value: !Ref pTagEnvironment
        - Key: SDLC
          Value: !Ref pTagSDLC
        - Key: ApplicationName
          Value: !Ref pTagApplicationName
        - Key: ApplicationRole
          Value: !Ref pTagApplicationRole
        - Key: Cluster
          Value: !Ref pTagCluster
        - Key: DataClassification
          Value: !Ref pTagDataClassification
        - Key: Compliance
          Value: !Ref pTagCompliance
        - Key: DataRetention
          Value: !Ref pTagDataRetention
        - Key: MapMigrated
          Value: !Ref pTagMapMigrated
        - Key: ProjectName
          Value: !Ref pTagProjectName
        - Key: ProductOwner
          Value: !Ref pTagProductOwner
        - Key: TechnicalOwner
          Value: !Ref pTagTechnicalOwner
        - Key: BusinessUnit
          Value: !Ref pTagBusinessUnit
        - Key: BusinessImpact
          Value: !Ref pTagBusinessImpact
        - Key: EscalationPath
          Value: !Ref pTagEscalationPath
        - Key: KnowledgeBase
          Value: !Ref pTagKnowledgeBase
        - Key: HoursOfOperation
          Value: !Ref pTagHoursOfOperation
        - Key: MaintenanceWindow
          Value: !Ref pTagMaintenanceWindow
        - Key: BackupSchedule
          Value: !Ref pTagBackupSchedule
        - Key: OptOut
          Value: !Ref pTagOptOut
        - Key: DeploymentMethod
          Value: !Ref pTagDeploymentMethod

  rNFWAutomationsSolutionStackSet:
    Type: AWS::CloudFormation::StackSet
    # Condition: CreateVpc
    Properties:
      StackSetName: NFW-Automations-Solution
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      CallAs: SELF
      Capabilities:
        - CAPABILITY_NAMED_IAM
      Description: "(SO0108) - The AWS CloudFormation template for deployment of the firewall-automation-for-network-traffic-on-aws, Version: v1.0.4"
      ManagedExecution:
        Active: true
      OperationPreferences:
        FailureTolerancePercentage: 100
        MaxConcurrentPercentage: 100
        RegionConcurrencyType: PARALLEL
      PermissionModel: SERVICE_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            AccountFilterType: INTERSECTION
            OrganizationalUnitIds:
              - !Ref pRootOrganizationalUnitId
            Accounts:
              - !Ref pNetworkAccountId
          Regions:
            - !Ref AWS::Region
      TemplateURL: !Join ["", [!Ref pS3BaseURLForNestedTemplates, "nfw-with-ipam/nested/firewall-automation-for-network-traffic-on-aws.template"]]
      Parameters:
        - ParameterKey: cidrBlock
          ParameterValue: !GetAtt rCustomGetCIDRFromIPAM.Cidr
        - ParameterKey: LogRetentionPeriod
          ParameterValue: !Ref pTagDataRetention
        - ParameterKey: ExistingTransitGateway
          ParameterValue: !GetAtt rCustomGetTgwDetails.TransitGatewayID
        - ParameterKey: TransitGatewayRouteTableIdForAssociation
          ParameterValue: !Ref pTransitGatewayRouteTableIdForAssociation
        # - ParameterKey: pGLCTSolutionVersion
        #   ParameterValue: !Ref pGLCTSolutionVersion
